// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fancoil

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FanCoilServiceClient is the client API for FanCoilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FanCoilServiceClient interface {
	// Change a parameter.
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
}

type fanCoilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFanCoilServiceClient(cc grpc.ClientConnInterface) FanCoilServiceClient {
	return &fanCoilServiceClient{cc}
}

func (c *fanCoilServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/fancoil.FanCoilService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FanCoilServiceServer is the server API for FanCoilService service.
// All implementations must embed UnimplementedFanCoilServiceServer
// for forward compatibility
type FanCoilServiceServer interface {
	// Change a parameter.
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	mustEmbedUnimplementedFanCoilServiceServer()
}

// UnimplementedFanCoilServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFanCoilServiceServer struct {
}

func (UnimplementedFanCoilServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedFanCoilServiceServer) mustEmbedUnimplementedFanCoilServiceServer() {}

// UnsafeFanCoilServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FanCoilServiceServer will
// result in compilation errors.
type UnsafeFanCoilServiceServer interface {
	mustEmbedUnimplementedFanCoilServiceServer()
}

func RegisterFanCoilServiceServer(s grpc.ServiceRegistrar, srv FanCoilServiceServer) {
	s.RegisterService(&FanCoilService_ServiceDesc, srv)
}

func _FanCoilService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanCoilServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fancoil.FanCoilService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanCoilServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FanCoilService_ServiceDesc is the grpc.ServiceDesc for FanCoilService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FanCoilService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fancoil.FanCoilService",
	HandlerType: (*FanCoilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _FanCoilService_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fancoil.proto",
}
