// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.0
// source: proto/fancoil/fancoil.proto

package fancoil

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TemperatureUnits int32

const (
	TemperatureUnits_TEMPERATURE_UNITS_UNSPECIFIED TemperatureUnits = 0
	TemperatureUnits_TEMPERATURE_UNITS_CELCIUS     TemperatureUnits = 1
	TemperatureUnits_TEMPERATURE_UNITS_FAHRENHEIT  TemperatureUnits = 2
)

// Enum value maps for TemperatureUnits.
var (
	TemperatureUnits_name = map[int32]string{
		0: "TEMPERATURE_UNITS_UNSPECIFIED",
		1: "TEMPERATURE_UNITS_CELCIUS",
		2: "TEMPERATURE_UNITS_FAHRENHEIT",
	}
	TemperatureUnits_value = map[string]int32{
		"TEMPERATURE_UNITS_UNSPECIFIED": 0,
		"TEMPERATURE_UNITS_CELCIUS":     1,
		"TEMPERATURE_UNITS_FAHRENHEIT":  2,
	}
)

func (x TemperatureUnits) Enum() *TemperatureUnits {
	p := new(TemperatureUnits)
	*p = x
	return p
}

func (x TemperatureUnits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemperatureUnits) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_fancoil_fancoil_proto_enumTypes[0].Descriptor()
}

func (TemperatureUnits) Type() protoreflect.EnumType {
	return &file_proto_fancoil_fancoil_proto_enumTypes[0]
}

func (x TemperatureUnits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemperatureUnits.Descriptor instead.
func (TemperatureUnits) EnumDescriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{0}
}

type FloorHeatingMode int32

const (
	FloorHeatingMode_FLOOR_HEATING_MODE_UNSPECIFIED FloorHeatingMode = 0
	FloorHeatingMode_FLOOR_HEATING_MODE_ON          FloorHeatingMode = 1
	FloorHeatingMode_FLOOR_HEATING_MODE_OFF         FloorHeatingMode = 2
)

// Enum value maps for FloorHeatingMode.
var (
	FloorHeatingMode_name = map[int32]string{
		0: "FLOOR_HEATING_MODE_UNSPECIFIED",
		1: "FLOOR_HEATING_MODE_ON",
		2: "FLOOR_HEATING_MODE_OFF",
	}
	FloorHeatingMode_value = map[string]int32{
		"FLOOR_HEATING_MODE_UNSPECIFIED": 0,
		"FLOOR_HEATING_MODE_ON":          1,
		"FLOOR_HEATING_MODE_OFF":         2,
	}
)

func (x FloorHeatingMode) Enum() *FloorHeatingMode {
	p := new(FloorHeatingMode)
	*p = x
	return p
}

func (x FloorHeatingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FloorHeatingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_fancoil_fancoil_proto_enumTypes[1].Descriptor()
}

func (FloorHeatingMode) Type() protoreflect.EnumType {
	return &file_proto_fancoil_fancoil_proto_enumTypes[1]
}

func (x FloorHeatingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FloorHeatingMode.Descriptor instead.
func (FloorHeatingMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{1}
}

type ValveState int32

const (
	ValveState_VALVE_STATE_UNSPECIFIED ValveState = 0
	ValveState_VALVE_STATE_ON          ValveState = 1
	ValveState_VALVE_STATE_OFF         ValveState = 2
)

// Enum value maps for ValveState.
var (
	ValveState_name = map[int32]string{
		0: "VALVE_STATE_UNSPECIFIED",
		1: "VALVE_STATE_ON",
		2: "VALVE_STATE_OFF",
	}
	ValveState_value = map[string]int32{
		"VALVE_STATE_UNSPECIFIED": 0,
		"VALVE_STATE_ON":          1,
		"VALVE_STATE_OFF":         2,
	}
)

func (x ValveState) Enum() *ValveState {
	p := new(ValveState)
	*p = x
	return p
}

func (x ValveState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValveState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_fancoil_fancoil_proto_enumTypes[2].Descriptor()
}

func (ValveState) Type() protoreflect.EnumType {
	return &file_proto_fancoil_fancoil_proto_enumTypes[2]
}

func (x ValveState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValveState.Descriptor instead.
func (ValveState) EnumDescriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{2}
}

type ValveSetting int32

const (
	ValveSetting_VALVE_SETTING_UNSPECIFIED ValveSetting = 0
	ValveSetting_VALVE_SETTING_ENABLED     ValveSetting = 1
	ValveSetting_VALVE_SETTING_DISABLED    ValveSetting = 2
)

// Enum value maps for ValveSetting.
var (
	ValveSetting_name = map[int32]string{
		0: "VALVE_SETTING_UNSPECIFIED",
		1: "VALVE_SETTING_ENABLED",
		2: "VALVE_SETTING_DISABLED",
	}
	ValveSetting_value = map[string]int32{
		"VALVE_SETTING_UNSPECIFIED": 0,
		"VALVE_SETTING_ENABLED":     1,
		"VALVE_SETTING_DISABLED":    2,
	}
)

func (x ValveSetting) Enum() *ValveSetting {
	p := new(ValveSetting)
	*p = x
	return p
}

func (x ValveSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValveSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_fancoil_fancoil_proto_enumTypes[3].Descriptor()
}

func (ValveSetting) Type() protoreflect.EnumType {
	return &file_proto_fancoil_fancoil_proto_enumTypes[3]
}

func (x ValveSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValveSetting.Descriptor instead.
func (ValveSetting) EnumDescriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{3}
}

type RegisterName int32

const (
	RegisterName_REGISTER_NAME_UNSPECIFIED                           RegisterName = 0
	RegisterName_REGISTER_NAME_ON_OFF                                RegisterName = 28301
	RegisterName_REGISTER_NAME_MODE                                  RegisterName = 28302
	RegisterName_REGISTER_NAME_FANSPEED                              RegisterName = 28303
	RegisterName_REGISTER_NAME_TIMER_OFF1                            RegisterName = 28306
	RegisterName_REGISTER_NAME_TIMER_OFF2                            RegisterName = 28307
	RegisterName_REGISTER_NAME_MAX_SET_TEMPERATURE                   RegisterName = 28308
	RegisterName_REGISTER_NAME_MIN_SET_TEMPERATURE                   RegisterName = 28309
	RegisterName_REGISTER_NAME_COOLING_SET_TEMPERATURE               RegisterName = 28310
	RegisterName_REGISTER_NAME_HEATING_SET_TEMPERATURE               RegisterName = 28311
	RegisterName_REGISTER_NAME_COOLING_SET_TEMPERATURE_AUTO          RegisterName = 28312
	RegisterName_REGISTER_NAME_HEATING_SET_TEMPERATURE_AUTO          RegisterName = 28313
	RegisterName_REGISTER_NAME_ANTI_COOLING_WIND_SETTING_TEMPERATURE RegisterName = 28314
	RegisterName_REGISTER_NAME_START_ANTI_HOT_WIND                   RegisterName = 28315
	RegisterName_REGISTER_NAME_START_ULTRA_LOW_WIND                  RegisterName = 28316
	RegisterName_REGISTER_NAME_USE_VALVE                             RegisterName = 28317
	RegisterName_REGISTER_NAME_USE_FLOOR_HEATING                     RegisterName = 28318
	RegisterName_REGISTER_NAME_USE_FAHRENHEIT                        RegisterName = 28319
	RegisterName_REGISTER_NAME_MASTER_SLAVE                          RegisterName = 28320
	RegisterName_REGISTER_NAME_UNIT_ADDRESS                          RegisterName = 28321
	RegisterName_REGISTER_NAME_ROOM_TEMPERATURE                      RegisterName = 46801
	RegisterName_REGISTER_NAME_COIL_TEMPERATURE                      RegisterName = 46802
	RegisterName_REGISTER_NAME_CURRENT_FAN_SPEED                     RegisterName = 46803
	RegisterName_REGISTER_NAME_FAN_RPM                               RegisterName = 46804
	RegisterName_REGISTER_NAME_VALVE_ON_OFF                          RegisterName = 46805
	RegisterName_REGISTER_NAME_REMOTE_ON_OFF                         RegisterName = 46806
	RegisterName_REGISTER_NAME_SIMULATION_SIGNAL                     RegisterName = 46807
	RegisterName_REGISTER_NAME_FAN_SPEED_SIGNAL_FEEDBACK_FAULT       RegisterName = 46808
	RegisterName_REGISTER_NAME_ROOM_TEMPERATURE_SENSOR_FAULT         RegisterName = 46809
	RegisterName_REGISTER_NAME_COIL_TEMPERATURE_SENSOR_FAULT         RegisterName = 46810
)

// Enum value maps for RegisterName.
var (
	RegisterName_name = map[int32]string{
		0:     "REGISTER_NAME_UNSPECIFIED",
		28301: "REGISTER_NAME_ON_OFF",
		28302: "REGISTER_NAME_MODE",
		28303: "REGISTER_NAME_FANSPEED",
		28306: "REGISTER_NAME_TIMER_OFF1",
		28307: "REGISTER_NAME_TIMER_OFF2",
		28308: "REGISTER_NAME_MAX_SET_TEMPERATURE",
		28309: "REGISTER_NAME_MIN_SET_TEMPERATURE",
		28310: "REGISTER_NAME_COOLING_SET_TEMPERATURE",
		28311: "REGISTER_NAME_HEATING_SET_TEMPERATURE",
		28312: "REGISTER_NAME_COOLING_SET_TEMPERATURE_AUTO",
		28313: "REGISTER_NAME_HEATING_SET_TEMPERATURE_AUTO",
		28314: "REGISTER_NAME_ANTI_COOLING_WIND_SETTING_TEMPERATURE",
		28315: "REGISTER_NAME_START_ANTI_HOT_WIND",
		28316: "REGISTER_NAME_START_ULTRA_LOW_WIND",
		28317: "REGISTER_NAME_USE_VALVE",
		28318: "REGISTER_NAME_USE_FLOOR_HEATING",
		28319: "REGISTER_NAME_USE_FAHRENHEIT",
		28320: "REGISTER_NAME_MASTER_SLAVE",
		28321: "REGISTER_NAME_UNIT_ADDRESS",
		46801: "REGISTER_NAME_ROOM_TEMPERATURE",
		46802: "REGISTER_NAME_COIL_TEMPERATURE",
		46803: "REGISTER_NAME_CURRENT_FAN_SPEED",
		46804: "REGISTER_NAME_FAN_RPM",
		46805: "REGISTER_NAME_VALVE_ON_OFF",
		46806: "REGISTER_NAME_REMOTE_ON_OFF",
		46807: "REGISTER_NAME_SIMULATION_SIGNAL",
		46808: "REGISTER_NAME_FAN_SPEED_SIGNAL_FEEDBACK_FAULT",
		46809: "REGISTER_NAME_ROOM_TEMPERATURE_SENSOR_FAULT",
		46810: "REGISTER_NAME_COIL_TEMPERATURE_SENSOR_FAULT",
	}
	RegisterName_value = map[string]int32{
		"REGISTER_NAME_UNSPECIFIED":                           0,
		"REGISTER_NAME_ON_OFF":                                28301,
		"REGISTER_NAME_MODE":                                  28302,
		"REGISTER_NAME_FANSPEED":                              28303,
		"REGISTER_NAME_TIMER_OFF1":                            28306,
		"REGISTER_NAME_TIMER_OFF2":                            28307,
		"REGISTER_NAME_MAX_SET_TEMPERATURE":                   28308,
		"REGISTER_NAME_MIN_SET_TEMPERATURE":                   28309,
		"REGISTER_NAME_COOLING_SET_TEMPERATURE":               28310,
		"REGISTER_NAME_HEATING_SET_TEMPERATURE":               28311,
		"REGISTER_NAME_COOLING_SET_TEMPERATURE_AUTO":          28312,
		"REGISTER_NAME_HEATING_SET_TEMPERATURE_AUTO":          28313,
		"REGISTER_NAME_ANTI_COOLING_WIND_SETTING_TEMPERATURE": 28314,
		"REGISTER_NAME_START_ANTI_HOT_WIND":                   28315,
		"REGISTER_NAME_START_ULTRA_LOW_WIND":                  28316,
		"REGISTER_NAME_USE_VALVE":                             28317,
		"REGISTER_NAME_USE_FLOOR_HEATING":                     28318,
		"REGISTER_NAME_USE_FAHRENHEIT":                        28319,
		"REGISTER_NAME_MASTER_SLAVE":                          28320,
		"REGISTER_NAME_UNIT_ADDRESS":                          28321,
		"REGISTER_NAME_ROOM_TEMPERATURE":                      46801,
		"REGISTER_NAME_COIL_TEMPERATURE":                      46802,
		"REGISTER_NAME_CURRENT_FAN_SPEED":                     46803,
		"REGISTER_NAME_FAN_RPM":                               46804,
		"REGISTER_NAME_VALVE_ON_OFF":                          46805,
		"REGISTER_NAME_REMOTE_ON_OFF":                         46806,
		"REGISTER_NAME_SIMULATION_SIGNAL":                     46807,
		"REGISTER_NAME_FAN_SPEED_SIGNAL_FEEDBACK_FAULT":       46808,
		"REGISTER_NAME_ROOM_TEMPERATURE_SENSOR_FAULT":         46809,
		"REGISTER_NAME_COIL_TEMPERATURE_SENSOR_FAULT":         46810,
	}
)

func (x RegisterName) Enum() *RegisterName {
	p := new(RegisterName)
	*p = x
	return p
}

func (x RegisterName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterName) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_fancoil_fancoil_proto_enumTypes[4].Descriptor()
}

func (RegisterName) Type() protoreflect.EnumType {
	return &file_proto_fancoil_fancoil_proto_enumTypes[4]
}

func (x RegisterName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterName.Descriptor instead.
func (RegisterName) EnumDescriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{4}
}

type FanSetting int32

const (
	FanSetting_FAN_SETTING_UNSPECIFIED FanSetting = 0
	FanSetting_FAN_SETTING_OFF         FanSetting = 7
	FanSetting_FAN_SETTING_ULTRA_LOW   FanSetting = 1
	FanSetting_FAN_SETTING_LOW         FanSetting = 2
	FanSetting_FAN_SETTING_MEDIUM      FanSetting = 3
	FanSetting_FAN_SETTING_HIGH        FanSetting = 4
	FanSetting_FAN_SETTING_MAX         FanSetting = 5
	FanSetting_FAN_SETTING_AUTO        FanSetting = 6
)

// Enum value maps for FanSetting.
var (
	FanSetting_name = map[int32]string{
		0: "FAN_SETTING_UNSPECIFIED",
		7: "FAN_SETTING_OFF",
		1: "FAN_SETTING_ULTRA_LOW",
		2: "FAN_SETTING_LOW",
		3: "FAN_SETTING_MEDIUM",
		4: "FAN_SETTING_HIGH",
		5: "FAN_SETTING_MAX",
		6: "FAN_SETTING_AUTO",
	}
	FanSetting_value = map[string]int32{
		"FAN_SETTING_UNSPECIFIED": 0,
		"FAN_SETTING_OFF":         7,
		"FAN_SETTING_ULTRA_LOW":   1,
		"FAN_SETTING_LOW":         2,
		"FAN_SETTING_MEDIUM":      3,
		"FAN_SETTING_HIGH":        4,
		"FAN_SETTING_MAX":         5,
		"FAN_SETTING_AUTO":        6,
	}
)

func (x FanSetting) Enum() *FanSetting {
	p := new(FanSetting)
	*p = x
	return p
}

func (x FanSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_fancoil_fancoil_proto_enumTypes[5].Descriptor()
}

func (FanSetting) Type() protoreflect.EnumType {
	return &file_proto_fancoil_fancoil_proto_enumTypes[5]
}

func (x FanSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanSetting.Descriptor instead.
func (FanSetting) EnumDescriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{5}
}

type PowerStatus int32

const (
	PowerStatus_POWER_STATUS_UNSPECIFIED PowerStatus = 0
	PowerStatus_POWER_STATUS_ON          PowerStatus = 1
	PowerStatus_POWER_STATUS_OFF         PowerStatus = 2
)

// Enum value maps for PowerStatus.
var (
	PowerStatus_name = map[int32]string{
		0: "POWER_STATUS_UNSPECIFIED",
		1: "POWER_STATUS_ON",
		2: "POWER_STATUS_OFF",
	}
	PowerStatus_value = map[string]int32{
		"POWER_STATUS_UNSPECIFIED": 0,
		"POWER_STATUS_ON":          1,
		"POWER_STATUS_OFF":         2,
	}
)

func (x PowerStatus) Enum() *PowerStatus {
	p := new(PowerStatus)
	*p = x
	return p
}

func (x PowerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_fancoil_fancoil_proto_enumTypes[6].Descriptor()
}

func (PowerStatus) Type() protoreflect.EnumType {
	return &file_proto_fancoil_fancoil_proto_enumTypes[6]
}

func (x PowerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerStatus.Descriptor instead.
func (PowerStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{6}
}

type Mode int32

const (
	Mode_MODE_UNSPECIFIED      Mode = 0
	Mode_MODE_AUTO             Mode = 5
	Mode_MODE_COOLING          Mode = 1
	Mode_MODE_DEHUMIDIFICATION Mode = 2
	Mode_MODE_VENTILATION      Mode = 3
	Mode_MODE_HEATING          Mode = 4
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		5: "MODE_AUTO",
		1: "MODE_COOLING",
		2: "MODE_DEHUMIDIFICATION",
		3: "MODE_VENTILATION",
		4: "MODE_HEATING",
	}
	Mode_value = map[string]int32{
		"MODE_UNSPECIFIED":      0,
		"MODE_AUTO":             5,
		"MODE_COOLING":          1,
		"MODE_DEHUMIDIFICATION": 2,
		"MODE_VENTILATION":      3,
		"MODE_HEATING":          4,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_fancoil_fancoil_proto_enumTypes[7].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_proto_fancoil_fancoil_proto_enumTypes[7]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{7}
}

type ModbusEnumValueOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterValue uint32 `protobuf:"varint,1,opt,name=register_value,json=registerValue,proto3" json:"register_value,omitempty"`
}

func (x *ModbusEnumValueOptions) Reset() {
	*x = ModbusEnumValueOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fancoil_fancoil_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModbusEnumValueOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModbusEnumValueOptions) ProtoMessage() {}

func (x *ModbusEnumValueOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fancoil_fancoil_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModbusEnumValueOptions.ProtoReflect.Descriptor instead.
func (*ModbusEnumValueOptions) Descriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{0}
}

func (x *ModbusEnumValueOptions) GetRegisterValue() uint32 {
	if x != nil {
		return x.RegisterValue
	}
	return 0
}

type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FancoilName string `protobuf:"bytes,1,opt,name=fancoil_name,json=fancoilName,proto3" json:"fancoil_name,omitempty"`
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fancoil_fancoil_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fancoil_fancoil_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{1}
}

func (x *GetStateRequest) GetFancoilName() string {
	if x != nil {
		return x.FancoilName
	}
	return ""
}

type GetStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State       *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	RawSnapshot *RawRegisterSnapshot `protobuf:"bytes,2,opt,name=raw_snapshot,json=rawSnapshot,proto3" json:"raw_snapshot,omitempty"`
}

func (x *GetStateResponse) Reset() {
	*x = GetStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fancoil_fancoil_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateResponse) ProtoMessage() {}

func (x *GetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fancoil_fancoil_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateResponse.ProtoReflect.Descriptor instead.
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{2}
}

func (x *GetStateResponse) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GetStateResponse) GetRawSnapshot() *RawRegisterSnapshot {
	if x != nil {
		return x.RawSnapshot
	}
	return nil
}

type RawRegisterSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawValues map[uint32]uint32 `protobuf:"bytes,1,rep,name=raw_values,json=rawValues,proto3" json:"raw_values,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RawRegisterSnapshot) Reset() {
	*x = RawRegisterSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fancoil_fancoil_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawRegisterSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawRegisterSnapshot) ProtoMessage() {}

func (x *RawRegisterSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fancoil_fancoil_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawRegisterSnapshot.ProtoReflect.Descriptor instead.
func (*RawRegisterSnapshot) Descriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{3}
}

func (x *RawRegisterSnapshot) GetRawValues() map[uint32]uint32 {
	if x != nil {
		return x.RawValues
	}
	return nil
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotTime                     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=snapshot_time,json=snapshotTime,proto3" json:"snapshot_time,omitempty"`
	PowerStatus                      PowerStatus            `protobuf:"varint,2,opt,name=power_status,json=powerStatus,proto3,enum=fancoil.PowerStatus" json:"power_status,omitempty"`
	Mode                             Mode                   `protobuf:"varint,3,opt,name=mode,proto3,enum=fancoil.Mode" json:"mode,omitempty"`
	RoomTemperature                  *Temperature           `protobuf:"bytes,4,opt,name=room_temperature,json=roomTemperature,proto3" json:"room_temperature,omitempty"`
	CoilTemperature                  *Temperature           `protobuf:"bytes,5,opt,name=coil_temperature,json=coilTemperature,proto3" json:"coil_temperature,omitempty"`
	PreferenceFanSetting             FanSetting             `protobuf:"varint,6,opt,name=preference_fan_setting,json=preferenceFanSetting,proto3,enum=fancoil.FanSetting" json:"preference_fan_setting,omitempty"`
	CurrentFanSetting                FanSetting             `protobuf:"varint,7,opt,name=current_fan_setting,json=currentFanSetting,proto3,enum=fancoil.FanSetting" json:"current_fan_setting,omitempty"`
	FanSpeed                         *FanSpeed              `protobuf:"bytes,8,opt,name=fan_speed,json=fanSpeed,proto3" json:"fan_speed,omitempty"`
	HeatingTargetTemperature         *Temperature           `protobuf:"bytes,9,opt,name=heating_target_temperature,json=heatingTargetTemperature,proto3" json:"heating_target_temperature,omitempty"`
	CoolingTargetTemperature         *Temperature           `protobuf:"bytes,10,opt,name=cooling_target_temperature,json=coolingTargetTemperature,proto3" json:"cooling_target_temperature,omitempty"`
	AntiCoolingTargetTemperature     *Temperature           `protobuf:"bytes,11,opt,name=anti_cooling_target_temperature,json=antiCoolingTargetTemperature,proto3" json:"anti_cooling_target_temperature,omitempty"`
	AutoModeHeatingTargetTemperature *Temperature           `protobuf:"bytes,12,opt,name=auto_mode_heating_target_temperature,json=autoModeHeatingTargetTemperature,proto3" json:"auto_mode_heating_target_temperature,omitempty"`
	AutoModeCoolingTargetTemperature *Temperature           `protobuf:"bytes,13,opt,name=auto_mode_cooling_target_temperature,json=autoModeCoolingTargetTemperature,proto3" json:"auto_mode_cooling_target_temperature,omitempty"`
	DisplayTemperatureUnits          TemperatureUnits       `protobuf:"varint,14,opt,name=display_temperature_units,json=displayTemperatureUnits,proto3,enum=fancoil.TemperatureUnits" json:"display_temperature_units,omitempty"`
	FloorHeatingMode                 FloorHeatingMode       `protobuf:"varint,15,opt,name=floor_heating_mode,json=floorHeatingMode,proto3,enum=fancoil.FloorHeatingMode" json:"floor_heating_mode,omitempty"`
	ModbusAddress                    *ModbusAddress         `protobuf:"bytes,16,opt,name=modbus_address,json=modbusAddress,proto3" json:"modbus_address,omitempty"`
	ValveState                       ValveState             `protobuf:"varint,17,opt,name=valve_state,json=valveState,proto3,enum=fancoil.ValveState" json:"valve_state,omitempty"`
	ValveSetting                     ValveSetting           `protobuf:"varint,18,opt,name=valve_setting,json=valveSetting,proto3,enum=fancoil.ValveSetting" json:"valve_setting,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fancoil_fancoil_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fancoil_fancoil_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{4}
}

func (x *State) GetSnapshotTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SnapshotTime
	}
	return nil
}

func (x *State) GetPowerStatus() PowerStatus {
	if x != nil {
		return x.PowerStatus
	}
	return PowerStatus_POWER_STATUS_UNSPECIFIED
}

func (x *State) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_MODE_UNSPECIFIED
}

func (x *State) GetRoomTemperature() *Temperature {
	if x != nil {
		return x.RoomTemperature
	}
	return nil
}

func (x *State) GetCoilTemperature() *Temperature {
	if x != nil {
		return x.CoilTemperature
	}
	return nil
}

func (x *State) GetPreferenceFanSetting() FanSetting {
	if x != nil {
		return x.PreferenceFanSetting
	}
	return FanSetting_FAN_SETTING_UNSPECIFIED
}

func (x *State) GetCurrentFanSetting() FanSetting {
	if x != nil {
		return x.CurrentFanSetting
	}
	return FanSetting_FAN_SETTING_UNSPECIFIED
}

func (x *State) GetFanSpeed() *FanSpeed {
	if x != nil {
		return x.FanSpeed
	}
	return nil
}

func (x *State) GetHeatingTargetTemperature() *Temperature {
	if x != nil {
		return x.HeatingTargetTemperature
	}
	return nil
}

func (x *State) GetCoolingTargetTemperature() *Temperature {
	if x != nil {
		return x.CoolingTargetTemperature
	}
	return nil
}

func (x *State) GetAntiCoolingTargetTemperature() *Temperature {
	if x != nil {
		return x.AntiCoolingTargetTemperature
	}
	return nil
}

func (x *State) GetAutoModeHeatingTargetTemperature() *Temperature {
	if x != nil {
		return x.AutoModeHeatingTargetTemperature
	}
	return nil
}

func (x *State) GetAutoModeCoolingTargetTemperature() *Temperature {
	if x != nil {
		return x.AutoModeCoolingTargetTemperature
	}
	return nil
}

func (x *State) GetDisplayTemperatureUnits() TemperatureUnits {
	if x != nil {
		return x.DisplayTemperatureUnits
	}
	return TemperatureUnits_TEMPERATURE_UNITS_UNSPECIFIED
}

func (x *State) GetFloorHeatingMode() FloorHeatingMode {
	if x != nil {
		return x.FloorHeatingMode
	}
	return FloorHeatingMode_FLOOR_HEATING_MODE_UNSPECIFIED
}

func (x *State) GetModbusAddress() *ModbusAddress {
	if x != nil {
		return x.ModbusAddress
	}
	return nil
}

func (x *State) GetValveState() ValveState {
	if x != nil {
		return x.ValveState
	}
	return ValveState_VALVE_STATE_UNSPECIFIED
}

func (x *State) GetValveSetting() ValveSetting {
	if x != nil {
		return x.ValveSetting
	}
	return ValveSetting_VALVE_SETTING_UNSPECIFIED
}

type SetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FancoilName              string       `protobuf:"bytes,1,opt,name=fancoil_name,json=fancoilName,proto3" json:"fancoil_name,omitempty"`
	PowerStatus              PowerStatus  `protobuf:"varint,2,opt,name=power_status,json=powerStatus,proto3,enum=fancoil.PowerStatus" json:"power_status,omitempty"`
	PreferenceFanSetting     FanSetting   `protobuf:"varint,6,opt,name=preference_fan_setting,json=preferenceFanSetting,proto3,enum=fancoil.FanSetting" json:"preference_fan_setting,omitempty"`
	HeatingTargetTemperature *Temperature `protobuf:"bytes,9,opt,name=heating_target_temperature,json=heatingTargetTemperature,proto3" json:"heating_target_temperature,omitempty"`
	CoolingTargetTemperature *Temperature `protobuf:"bytes,10,opt,name=cooling_target_temperature,json=coolingTargetTemperature,proto3" json:"cooling_target_temperature,omitempty"`
	ValveSetting             ValveSetting `protobuf:"varint,18,opt,name=valve_setting,json=valveSetting,proto3,enum=fancoil.ValveSetting" json:"valve_setting,omitempty"`
}

func (x *SetStateRequest) Reset() {
	*x = SetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fancoil_fancoil_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStateRequest) ProtoMessage() {}

func (x *SetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fancoil_fancoil_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStateRequest.ProtoReflect.Descriptor instead.
func (*SetStateRequest) Descriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{5}
}

func (x *SetStateRequest) GetFancoilName() string {
	if x != nil {
		return x.FancoilName
	}
	return ""
}

func (x *SetStateRequest) GetPowerStatus() PowerStatus {
	if x != nil {
		return x.PowerStatus
	}
	return PowerStatus_POWER_STATUS_UNSPECIFIED
}

func (x *SetStateRequest) GetPreferenceFanSetting() FanSetting {
	if x != nil {
		return x.PreferenceFanSetting
	}
	return FanSetting_FAN_SETTING_UNSPECIFIED
}

func (x *SetStateRequest) GetHeatingTargetTemperature() *Temperature {
	if x != nil {
		return x.HeatingTargetTemperature
	}
	return nil
}

func (x *SetStateRequest) GetCoolingTargetTemperature() *Temperature {
	if x != nil {
		return x.CoolingTargetTemperature
	}
	return nil
}

func (x *SetStateRequest) GetValveSetting() ValveSetting {
	if x != nil {
		return x.ValveSetting
	}
	return ValveSetting_VALVE_SETTING_UNSPECIFIED
}

type ModbusAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address uint32 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ModbusAddress) Reset() {
	*x = ModbusAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fancoil_fancoil_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModbusAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModbusAddress) ProtoMessage() {}

func (x *ModbusAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fancoil_fancoil_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModbusAddress.ProtoReflect.Descriptor instead.
func (*ModbusAddress) Descriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{6}
}

func (x *ModbusAddress) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

type SetStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetStateResponse) Reset() {
	*x = SetStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fancoil_fancoil_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStateResponse) ProtoMessage() {}

func (x *SetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fancoil_fancoil_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStateResponse.ProtoReflect.Descriptor instead.
func (*SetStateResponse) Descriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{7}
}

type Temperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DegreesCelcius float32 `protobuf:"fixed32,1,opt,name=degrees_celcius,json=degreesCelcius,proto3" json:"degrees_celcius,omitempty"`
}

func (x *Temperature) Reset() {
	*x = Temperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fancoil_fancoil_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Temperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Temperature) ProtoMessage() {}

func (x *Temperature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fancoil_fancoil_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Temperature.ProtoReflect.Descriptor instead.
func (*Temperature) Descriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{8}
}

func (x *Temperature) GetDegreesCelcius() float32 {
	if x != nil {
		return x.DegreesCelcius
	}
	return 0
}

type FanSpeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rpm int64 `protobuf:"varint,1,opt,name=rpm,proto3" json:"rpm,omitempty"`
}

func (x *FanSpeed) Reset() {
	*x = FanSpeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fancoil_fancoil_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanSpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanSpeed) ProtoMessage() {}

func (x *FanSpeed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fancoil_fancoil_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanSpeed.ProtoReflect.Descriptor instead.
func (*FanSpeed) Descriptor() ([]byte, []int) {
	return file_proto_fancoil_fancoil_proto_rawDescGZIP(), []int{9}
}

func (x *FanSpeed) GetRpm() int64 {
	if x != nil {
		return x.Rpm
	}
	return 0
}

var file_proto_fancoil_fancoil_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*ModbusEnumValueOptions)(nil),
		Field:         60000,
		Name:          "fancoil.modbus_options",
		Tag:           "bytes,60000,opt,name=modbus_options",
		Filename:      "proto/fancoil/fancoil.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional fancoil.ModbusEnumValueOptions modbus_options = 60000;
	E_ModbusOptions = &file_proto_fancoil_fancoil_proto_extTypes[0]
)

var File_proto_fancoil_fancoil_proto protoreflect.FileDescriptor

var file_proto_fancoil_fancoil_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2f,
	0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66,
	0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x16, 0x4d, 0x6f, 0x64,
	0x62, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x79, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x61,
	0x77, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x52, 0x61, 0x77, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0b,
	0x72, 0x61, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x13,
	0x52, 0x61, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69,
	0x6c, 0x2e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x3c, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x0a,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x6f, 0x69, 0x6c, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c,
	0x2e, 0x46, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x43, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x46, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x61, 0x6e, 0x63,
	0x6f, 0x69, 0x6c, 0x2e, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x08, 0x66, 0x61,
	0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x1a, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x6e,
	0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x18, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x1a, 0x63, 0x6f,
	0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x18, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5b,
	0x0a, 0x1f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69,
	0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x1c, 0x61,
	0x6e, 0x74, 0x69, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x64, 0x0a, 0x24, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x6e, 0x63,
	0x6f, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x20, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x64, 0x0a, 0x24, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x61, 0x6e,
	0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x47,
	0x0a, 0x12, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x61, 0x6e,
	0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x62, 0x75,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x62, 0x75, 0x73,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x61,
	0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0d,
	0x76, 0x61, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x56, 0x61,
	0x6c, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x76,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x9c, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f,
	0x69, 0x6c, 0x2e, 0x46, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x1a, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69,
	0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x18, 0x68,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x1a, 0x63, 0x6f, 0x6f, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61,
	0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x18, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x76,
	0x61, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x56, 0x61, 0x6c,
	0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x76, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x29, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x62, 0x75,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73,
	0x5f, 0x63, 0x65, 0x6c, 0x63, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x43, 0x65, 0x6c, 0x63, 0x69, 0x75, 0x73, 0x22, 0x1c,
	0x0a, 0x08, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x70,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x70, 0x6d, 0x2a, 0x76, 0x0a, 0x10,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x1d, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x43, 0x45, 0x4c, 0x43, 0x49, 0x55, 0x53,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x46, 0x41, 0x48, 0x52, 0x45, 0x4e, 0x48, 0x45,
	0x49, 0x54, 0x10, 0x02, 0x2a, 0x6d, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x48, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4c, 0x4f, 0x4f,
	0x52, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c, 0x4f, 0x4f, 0x52,
	0x5f, 0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x41, 0x4c, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x56, 0x41, 0x4c, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x4c, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x2a, 0x72, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x76, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x41, 0x4c, 0x56, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x15, 0x56, 0x41, 0x4c, 0x56, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x1a, 0x06, 0x82, 0xa6, 0x1d, 0x02, 0x08, 0x01, 0x12, 0x20, 0x0a, 0x16, 0x56, 0x41, 0x4c,
	0x56, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x04, 0x82, 0xa6, 0x1d, 0x00, 0x2a, 0xa4, 0x09, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x14, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x4e, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x8d, 0xdd, 0x01, 0x12, 0x18, 0x0a, 0x12, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x8e, 0xdd,
	0x01, 0x12, 0x1c, 0x0a, 0x16, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x8f, 0xdd, 0x01, 0x12,
	0x1e, 0x0a, 0x18, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x31, 0x10, 0x92, 0xdd, 0x01, 0x12,
	0x1e, 0x0a, 0x18, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x32, 0x10, 0x93, 0xdd, 0x01, 0x12,
	0x27, 0x0a, 0x21, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x94, 0xdd, 0x01, 0x12, 0x27, 0x0a, 0x21, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x95, 0xdd,
	0x01, 0x12, 0x2b, 0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54,
	0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x96, 0xdd, 0x01, 0x12, 0x2b,
	0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x97, 0xdd, 0x01, 0x12, 0x30, 0x0a, 0x2a, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4f,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x98, 0xdd, 0x01, 0x12, 0x30, 0x0a,
	0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x48,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x99, 0xdd, 0x01, 0x12,
	0x39, 0x0a, 0x33, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x41, 0x4e, 0x54, 0x49, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x49,
	0x4e, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x9a, 0xdd, 0x01, 0x12, 0x27, 0x0a, 0x21, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x10,
	0x9b, 0xdd, 0x01, 0x12, 0x28, 0x0a, 0x22, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41,
	0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x10, 0x9c, 0xdd, 0x01, 0x12, 0x1d, 0x0a,
	0x17, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x56, 0x45, 0x10, 0x9d, 0xdd, 0x01, 0x12, 0x25, 0x0a, 0x1f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x9e, 0xdd, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x48, 0x52, 0x45, 0x4e, 0x48,
	0x45, 0x49, 0x54, 0x10, 0x9f, 0xdd, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0xa0, 0xdd, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xa1, 0xdd, 0x01, 0x12, 0x24, 0x0a, 0x1e, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0xd1, 0xed,
	0x02, 0x12, 0x24, 0x0a, 0x1e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4c, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x10, 0xd2, 0xed, 0x02, 0x12, 0x25, 0x0a, 0x1f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0xd3, 0xed, 0x02, 0x12, 0x1b,
	0x0a, 0x15, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x46, 0x41, 0x4e, 0x5f, 0x52, 0x50, 0x4d, 0x10, 0xd4, 0xed, 0x02, 0x12, 0x20, 0x0a, 0x1a, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0xd5, 0xed, 0x02, 0x12, 0x21, 0x0a,
	0x1b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0xd6, 0xed, 0x02,
	0x12, 0x25, 0x0a, 0x1f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x4c, 0x10, 0xd7, 0xed, 0x02, 0x12, 0x33, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41,
	0x43, 0x4b, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0xd8, 0xed, 0x02, 0x12, 0x31, 0x0a, 0x2b,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53,
	0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0xd9, 0xed, 0x02, 0x12,
	0x31, 0x0a, 0x2b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x43, 0x4f, 0x49, 0x4c, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0xda,
	0xed, 0x02, 0x2a, 0xfd, 0x01, 0x0a, 0x0a, 0x46, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x0f, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x07, 0x1a, 0x04, 0x82, 0xa6, 0x1d, 0x00, 0x12, 0x21, 0x0a, 0x15, 0x46, 0x41, 0x4e,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x01, 0x1a, 0x06, 0x82, 0xa6, 0x1d, 0x02, 0x08, 0x01, 0x12, 0x1b, 0x0a, 0x0f,
	0x46, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x02, 0x1a, 0x06, 0x82, 0xa6, 0x1d, 0x02, 0x08, 0x02, 0x12, 0x1e, 0x0a, 0x12, 0x46, 0x41, 0x4e,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x03, 0x1a, 0x06, 0x82, 0xa6, 0x1d, 0x02, 0x08, 0x03, 0x12, 0x1c, 0x0a, 0x10, 0x46, 0x41, 0x4e,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x1a,
	0x06, 0x82, 0xa6, 0x1d, 0x02, 0x08, 0x04, 0x12, 0x1b, 0x0a, 0x0f, 0x46, 0x41, 0x4e, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x1a, 0x06, 0x82, 0xa6,
	0x1d, 0x02, 0x08, 0x05, 0x12, 0x1c, 0x0a, 0x10, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x06, 0x1a, 0x06, 0x82, 0xa6, 0x1d, 0x02,
	0x08, 0x06, 0x2a, 0x56, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x2a, 0x80, 0x01, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x45, 0x48, 0x55, 0x4d, 0x49, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45,
	0x4e, 0x54, 0x49, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x32, 0x96, 0x01,
	0x0a, 0x0e, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x41, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x66,
	0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x66, 0x61, 0x6e, 0x63,
	0x6f, 0x69, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x3a, 0x6b, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0, 0xd4, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x61, 0x6e, 0x63, 0x6f, 0x69, 0x6c, 0x2e, 0x4d, 0x6f,
	0x64, 0x62, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x6e, 0x7a, 0x6f, 0x6a, 0x69, 0x76, 0x65, 0x2f, 0x68, 0x65, 0x61, 0x74,
	0x70, 0x75, 0x6d, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x61, 0x6e, 0x63, 0x6f,
	0x69, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_fancoil_fancoil_proto_rawDescOnce sync.Once
	file_proto_fancoil_fancoil_proto_rawDescData = file_proto_fancoil_fancoil_proto_rawDesc
)

func file_proto_fancoil_fancoil_proto_rawDescGZIP() []byte {
	file_proto_fancoil_fancoil_proto_rawDescOnce.Do(func() {
		file_proto_fancoil_fancoil_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_fancoil_fancoil_proto_rawDescData)
	})
	return file_proto_fancoil_fancoil_proto_rawDescData
}

var file_proto_fancoil_fancoil_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_proto_fancoil_fancoil_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_fancoil_fancoil_proto_goTypes = []any{
	(TemperatureUnits)(0),                 // 0: fancoil.TemperatureUnits
	(FloorHeatingMode)(0),                 // 1: fancoil.FloorHeatingMode
	(ValveState)(0),                       // 2: fancoil.ValveState
	(ValveSetting)(0),                     // 3: fancoil.ValveSetting
	(RegisterName)(0),                     // 4: fancoil.RegisterName
	(FanSetting)(0),                       // 5: fancoil.FanSetting
	(PowerStatus)(0),                      // 6: fancoil.PowerStatus
	(Mode)(0),                             // 7: fancoil.Mode
	(*ModbusEnumValueOptions)(nil),        // 8: fancoil.ModbusEnumValueOptions
	(*GetStateRequest)(nil),               // 9: fancoil.GetStateRequest
	(*GetStateResponse)(nil),              // 10: fancoil.GetStateResponse
	(*RawRegisterSnapshot)(nil),           // 11: fancoil.RawRegisterSnapshot
	(*State)(nil),                         // 12: fancoil.State
	(*SetStateRequest)(nil),               // 13: fancoil.SetStateRequest
	(*ModbusAddress)(nil),                 // 14: fancoil.ModbusAddress
	(*SetStateResponse)(nil),              // 15: fancoil.SetStateResponse
	(*Temperature)(nil),                   // 16: fancoil.Temperature
	(*FanSpeed)(nil),                      // 17: fancoil.FanSpeed
	nil,                                   // 18: fancoil.RawRegisterSnapshot.RawValuesEntry
	(*timestamppb.Timestamp)(nil),         // 19: google.protobuf.Timestamp
	(*descriptorpb.EnumValueOptions)(nil), // 20: google.protobuf.EnumValueOptions
}
var file_proto_fancoil_fancoil_proto_depIdxs = []int32{
	12, // 0: fancoil.GetStateResponse.state:type_name -> fancoil.State
	11, // 1: fancoil.GetStateResponse.raw_snapshot:type_name -> fancoil.RawRegisterSnapshot
	18, // 2: fancoil.RawRegisterSnapshot.raw_values:type_name -> fancoil.RawRegisterSnapshot.RawValuesEntry
	19, // 3: fancoil.State.snapshot_time:type_name -> google.protobuf.Timestamp
	6,  // 4: fancoil.State.power_status:type_name -> fancoil.PowerStatus
	7,  // 5: fancoil.State.mode:type_name -> fancoil.Mode
	16, // 6: fancoil.State.room_temperature:type_name -> fancoil.Temperature
	16, // 7: fancoil.State.coil_temperature:type_name -> fancoil.Temperature
	5,  // 8: fancoil.State.preference_fan_setting:type_name -> fancoil.FanSetting
	5,  // 9: fancoil.State.current_fan_setting:type_name -> fancoil.FanSetting
	17, // 10: fancoil.State.fan_speed:type_name -> fancoil.FanSpeed
	16, // 11: fancoil.State.heating_target_temperature:type_name -> fancoil.Temperature
	16, // 12: fancoil.State.cooling_target_temperature:type_name -> fancoil.Temperature
	16, // 13: fancoil.State.anti_cooling_target_temperature:type_name -> fancoil.Temperature
	16, // 14: fancoil.State.auto_mode_heating_target_temperature:type_name -> fancoil.Temperature
	16, // 15: fancoil.State.auto_mode_cooling_target_temperature:type_name -> fancoil.Temperature
	0,  // 16: fancoil.State.display_temperature_units:type_name -> fancoil.TemperatureUnits
	1,  // 17: fancoil.State.floor_heating_mode:type_name -> fancoil.FloorHeatingMode
	14, // 18: fancoil.State.modbus_address:type_name -> fancoil.ModbusAddress
	2,  // 19: fancoil.State.valve_state:type_name -> fancoil.ValveState
	3,  // 20: fancoil.State.valve_setting:type_name -> fancoil.ValveSetting
	6,  // 21: fancoil.SetStateRequest.power_status:type_name -> fancoil.PowerStatus
	5,  // 22: fancoil.SetStateRequest.preference_fan_setting:type_name -> fancoil.FanSetting
	16, // 23: fancoil.SetStateRequest.heating_target_temperature:type_name -> fancoil.Temperature
	16, // 24: fancoil.SetStateRequest.cooling_target_temperature:type_name -> fancoil.Temperature
	3,  // 25: fancoil.SetStateRequest.valve_setting:type_name -> fancoil.ValveSetting
	20, // 26: fancoil.modbus_options:extendee -> google.protobuf.EnumValueOptions
	8,  // 27: fancoil.modbus_options:type_name -> fancoil.ModbusEnumValueOptions
	9,  // 28: fancoil.FanCoilService.GetState:input_type -> fancoil.GetStateRequest
	13, // 29: fancoil.FanCoilService.SetState:input_type -> fancoil.SetStateRequest
	10, // 30: fancoil.FanCoilService.GetState:output_type -> fancoil.GetStateResponse
	15, // 31: fancoil.FanCoilService.SetState:output_type -> fancoil.SetStateResponse
	30, // [30:32] is the sub-list for method output_type
	28, // [28:30] is the sub-list for method input_type
	27, // [27:28] is the sub-list for extension type_name
	26, // [26:27] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_proto_fancoil_fancoil_proto_init() }
func file_proto_fancoil_fancoil_proto_init() {
	if File_proto_fancoil_fancoil_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_fancoil_fancoil_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ModbusEnumValueOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fancoil_fancoil_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fancoil_fancoil_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fancoil_fancoil_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RawRegisterSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fancoil_fancoil_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fancoil_fancoil_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fancoil_fancoil_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ModbusAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fancoil_fancoil_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SetStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fancoil_fancoil_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Temperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fancoil_fancoil_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*FanSpeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_fancoil_fancoil_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   11,
			NumExtensions: 1,
			NumServices:   1,
		},
		GoTypes:           file_proto_fancoil_fancoil_proto_goTypes,
		DependencyIndexes: file_proto_fancoil_fancoil_proto_depIdxs,
		EnumInfos:         file_proto_fancoil_fancoil_proto_enumTypes,
		MessageInfos:      file_proto_fancoil_fancoil_proto_msgTypes,
		ExtensionInfos:    file_proto_fancoil_fancoil_proto_extTypes,
	}.Build()
	File_proto_fancoil_fancoil_proto = out.File
	file_proto_fancoil_fancoil_proto_rawDesc = nil
	file_proto_fancoil_fancoil_proto_goTypes = nil
	file_proto_fancoil_fancoil_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FanCoilServiceClient is the client API for FanCoilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FanCoilServiceClient interface {
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
}

type fanCoilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFanCoilServiceClient(cc grpc.ClientConnInterface) FanCoilServiceClient {
	return &fanCoilServiceClient{cc}
}

func (c *fanCoilServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/fancoil.FanCoilService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanCoilServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, "/fancoil.FanCoilService/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FanCoilServiceServer is the server API for FanCoilService service.
type FanCoilServiceServer interface {
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
}

// UnimplementedFanCoilServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFanCoilServiceServer struct {
}

func (*UnimplementedFanCoilServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedFanCoilServiceServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}

func RegisterFanCoilServiceServer(s *grpc.Server, srv FanCoilServiceServer) {
	s.RegisterService(&_FanCoilService_serviceDesc, srv)
}

func _FanCoilService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanCoilServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fancoil.FanCoilService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanCoilServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanCoilService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanCoilServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fancoil.FanCoilService/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanCoilServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FanCoilService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fancoil.FanCoilService",
	HandlerType: (*FanCoilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _FanCoilService_GetState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _FanCoilService_SetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fancoil/fancoil.proto",
}
