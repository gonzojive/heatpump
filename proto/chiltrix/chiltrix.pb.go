// Protocol buffers for storing Chiltrix CX34 data.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: chiltrix.proto

package chiltrix

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State captures the state of the heat pump at a given instant for archival purposes.
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collection time.
	CollectionTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	// Modbus register values.
	RegisterValues *RegisterSnapshot `protobuf:"bytes,2,opt,name=register_values,json=registerValues,proto3" json:"register_values,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiltrix_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_chiltrix_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_chiltrix_proto_rawDescGZIP(), []int{0}
}

func (x *State) GetCollectionTime() *timestamp.Timestamp {
	if x != nil {
		return x.CollectionTime
	}
	return nil
}

func (x *State) GetRegisterValues() *RegisterSnapshot {
	if x != nil {
		return x.RegisterValues
	}
	return nil
}

// Snapshot holds the values of all of the heat pump modbus registers for
// archival purposes.
type RegisterSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CX34 only supports holding registers, which are 16 bit values.
	// Protobuf only supports 32-bit values, otherwise we would use uint16.
	HoldingRegisterValues map[uint32]uint32 `protobuf:"bytes,1,rep,name=holding_register_values,json=holdingRegisterValues,proto3" json:"holding_register_values,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RegisterSnapshot) Reset() {
	*x = RegisterSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiltrix_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSnapshot) ProtoMessage() {}

func (x *RegisterSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_chiltrix_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSnapshot.ProtoReflect.Descriptor instead.
func (*RegisterSnapshot) Descriptor() ([]byte, []int) {
	return file_chiltrix_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterSnapshot) GetHoldingRegisterValues() map[uint32]uint32 {
	if x != nil {
		return x.HoldingRegisterValues
	}
	return nil
}

// QueryStreamRequest specifies a request for heatpump states.
type QueryStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start_time and end_time specify a time range to be queried. Either or both values
	// may be omitted.
	StartTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *QueryStreamRequest) Reset() {
	*x = QueryStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiltrix_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStreamRequest) ProtoMessage() {}

func (x *QueryStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chiltrix_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStreamRequest.ProtoReflect.Descriptor instead.
func (*QueryStreamRequest) Descriptor() ([]byte, []int) {
	return file_chiltrix_proto_rawDescGZIP(), []int{2}
}

func (x *QueryStreamRequest) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QueryStreamRequest) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// QueryStreamResponse is an element in the returned stream for the QueryStream RPC.
type QueryStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *QueryStreamResponse) Reset() {
	*x = QueryStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiltrix_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStreamResponse) ProtoMessage() {}

func (x *QueryStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chiltrix_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStreamResponse.ProtoReflect.Descriptor instead.
func (*QueryStreamResponse) Descriptor() ([]byte, []int) {
	return file_chiltrix_proto_rawDescGZIP(), []int{3}
}

func (x *QueryStreamResponse) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

// StateSequence captures a series of state values. They are encoded
// differentially.
type StateSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A series of StateDiff objects. The first object
	Diffs []*StateDiff `protobuf:"bytes,1,rep,name=diffs,proto3" json:"diffs,omitempty"`
}

func (x *StateSequence) Reset() {
	*x = StateSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiltrix_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateSequence) ProtoMessage() {}

func (x *StateSequence) ProtoReflect() protoreflect.Message {
	mi := &file_chiltrix_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateSequence.ProtoReflect.Descriptor instead.
func (*StateSequence) Descriptor() ([]byte, []int) {
	return file_chiltrix_proto_rawDescGZIP(), []int{4}
}

func (x *StateSequence) GetDiffs() []*StateDiff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

// StateDiff is a difference between two states.
type StateDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collection time, always specified.
	CollectionTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	// Modbus register values.
	UpdatedValues *RegisterSnapshot `protobuf:"bytes,2,opt,name=updated_values,json=updatedValues,proto3" json:"updated_values,omitempty"`
	// Registers that are not present in the new map.
	DeletedRegisters []uint32 `protobuf:"varint,3,rep,packed,name=deleted_registers,json=deletedRegisters,proto3" json:"deleted_registers,omitempty"`
}

func (x *StateDiff) Reset() {
	*x = StateDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiltrix_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateDiff) ProtoMessage() {}

func (x *StateDiff) ProtoReflect() protoreflect.Message {
	mi := &file_chiltrix_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateDiff.ProtoReflect.Descriptor instead.
func (*StateDiff) Descriptor() ([]byte, []int) {
	return file_chiltrix_proto_rawDescGZIP(), []int{5}
}

func (x *StateDiff) GetCollectionTime() *timestamp.Timestamp {
	if x != nil {
		return x.CollectionTime
	}
	return nil
}

func (x *StateDiff) GetUpdatedValues() *RegisterSnapshot {
	if x != nil {
		return x.UpdatedValues
	}
	return nil
}

func (x *StateDiff) GetDeletedRegisters() []uint32 {
	if x != nil {
		return x.DeletedRegisters
	}
	return nil
}

type SetParameterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If specifies, updates the target heating mode temperature.
	TargetHeatingModeTemperature *Temperature `protobuf:"bytes,1,opt,name=target_heating_mode_temperature,json=targetHeatingModeTemperature,proto3" json:"target_heating_mode_temperature,omitempty"`
	// Any other register.
	RegisterValue *RegisterValue `protobuf:"bytes,2,opt,name=register_value,json=registerValue,proto3" json:"register_value,omitempty"`
}

func (x *SetParameterRequest) Reset() {
	*x = SetParameterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiltrix_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetParameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetParameterRequest) ProtoMessage() {}

func (x *SetParameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chiltrix_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetParameterRequest.ProtoReflect.Descriptor instead.
func (*SetParameterRequest) Descriptor() ([]byte, []int) {
	return file_chiltrix_proto_rawDescGZIP(), []int{6}
}

func (x *SetParameterRequest) GetTargetHeatingModeTemperature() *Temperature {
	if x != nil {
		return x.TargetHeatingModeTemperature
	}
	return nil
}

func (x *SetParameterRequest) GetRegisterValue() *RegisterValue {
	if x != nil {
		return x.RegisterValue
	}
	return nil
}

type RegisterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Register uint32 `protobuf:"varint,1,opt,name=register,proto3" json:"register,omitempty"`
	Value    uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RegisterValue) Reset() {
	*x = RegisterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiltrix_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterValue) ProtoMessage() {}

func (x *RegisterValue) ProtoReflect() protoreflect.Message {
	mi := &file_chiltrix_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterValue.ProtoReflect.Descriptor instead.
func (*RegisterValue) Descriptor() ([]byte, []int) {
	return file_chiltrix_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterValue) GetRegister() uint32 {
	if x != nil {
		return x.Register
	}
	return 0
}

func (x *RegisterValue) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SetParameterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetParameterResponse) Reset() {
	*x = SetParameterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiltrix_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetParameterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetParameterResponse) ProtoMessage() {}

func (x *SetParameterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chiltrix_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetParameterResponse.ProtoReflect.Descriptor instead.
func (*SetParameterResponse) Descriptor() ([]byte, []int) {
	return file_chiltrix_proto_rawDescGZIP(), []int{8}
}

type Temperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DegreesCelcius float64 `protobuf:"fixed64,1,opt,name=degrees_celcius,json=degreesCelcius,proto3" json:"degrees_celcius,omitempty"`
}

func (x *Temperature) Reset() {
	*x = Temperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiltrix_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Temperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Temperature) ProtoMessage() {}

func (x *Temperature) ProtoReflect() protoreflect.Message {
	mi := &file_chiltrix_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Temperature.ProtoReflect.Descriptor instead.
func (*Temperature) Descriptor() ([]byte, []int) {
	return file_chiltrix_proto_rawDescGZIP(), []int{9}
}

func (x *Temperature) GetDegreesCelcius() float64 {
	if x != nil {
		return x.DegreesCelcius
	}
	return 0
}

var File_chiltrix_proto protoreflect.FileDescriptor

var file_chiltrix_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0xcb, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x6d, 0x0a, 0x17, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x68, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x48, 0x0a, 0x1a, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73,
	0x22, 0xc0, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x43,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68,
	0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x1f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x1c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x16, 0x0a, 0x14,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x5f, 0x63,
	0x65, 0x6c, 0x63, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x73, 0x43, 0x65, 0x6c, 0x63, 0x69, 0x75, 0x73, 0x32, 0x5b, 0x0a, 0x09,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x69, 0x6c, 0x74,
	0x72, 0x69, 0x78, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x69,
	0x78, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x32, 0x63, 0x0a, 0x10, 0x52, 0x65, 0x61,
	0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e,
	0x63, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63,
	0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2e,
	0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6e,
	0x7a, 0x6f, 0x6a, 0x69, 0x76, 0x65, 0x2f, 0x68, 0x65, 0x61, 0x74, 0x70, 0x75, 0x6d, 0x70, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x69, 0x78, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chiltrix_proto_rawDescOnce sync.Once
	file_chiltrix_proto_rawDescData = file_chiltrix_proto_rawDesc
)

func file_chiltrix_proto_rawDescGZIP() []byte {
	file_chiltrix_proto_rawDescOnce.Do(func() {
		file_chiltrix_proto_rawDescData = protoimpl.X.CompressGZIP(file_chiltrix_proto_rawDescData)
	})
	return file_chiltrix_proto_rawDescData
}

var file_chiltrix_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_chiltrix_proto_goTypes = []interface{}{
	(*State)(nil),                // 0: chiltrix.State
	(*RegisterSnapshot)(nil),     // 1: chiltrix.RegisterSnapshot
	(*QueryStreamRequest)(nil),   // 2: chiltrix.QueryStreamRequest
	(*QueryStreamResponse)(nil),  // 3: chiltrix.QueryStreamResponse
	(*StateSequence)(nil),        // 4: chiltrix.StateSequence
	(*StateDiff)(nil),            // 5: chiltrix.StateDiff
	(*SetParameterRequest)(nil),  // 6: chiltrix.SetParameterRequest
	(*RegisterValue)(nil),        // 7: chiltrix.RegisterValue
	(*SetParameterResponse)(nil), // 8: chiltrix.SetParameterResponse
	(*Temperature)(nil),          // 9: chiltrix.Temperature
	nil,                          // 10: chiltrix.RegisterSnapshot.HoldingRegisterValuesEntry
	(*timestamp.Timestamp)(nil),  // 11: google.protobuf.Timestamp
}
var file_chiltrix_proto_depIdxs = []int32{
	11, // 0: chiltrix.State.collection_time:type_name -> google.protobuf.Timestamp
	1,  // 1: chiltrix.State.register_values:type_name -> chiltrix.RegisterSnapshot
	10, // 2: chiltrix.RegisterSnapshot.holding_register_values:type_name -> chiltrix.RegisterSnapshot.HoldingRegisterValuesEntry
	11, // 3: chiltrix.QueryStreamRequest.start_time:type_name -> google.protobuf.Timestamp
	11, // 4: chiltrix.QueryStreamRequest.end_time:type_name -> google.protobuf.Timestamp
	0,  // 5: chiltrix.QueryStreamResponse.state:type_name -> chiltrix.State
	5,  // 6: chiltrix.StateSequence.diffs:type_name -> chiltrix.StateDiff
	11, // 7: chiltrix.StateDiff.collection_time:type_name -> google.protobuf.Timestamp
	1,  // 8: chiltrix.StateDiff.updated_values:type_name -> chiltrix.RegisterSnapshot
	9,  // 9: chiltrix.SetParameterRequest.target_heating_mode_temperature:type_name -> chiltrix.Temperature
	7,  // 10: chiltrix.SetParameterRequest.register_value:type_name -> chiltrix.RegisterValue
	2,  // 11: chiltrix.Historian.QueryStream:input_type -> chiltrix.QueryStreamRequest
	6,  // 12: chiltrix.ReadWriteService.SetParameter:input_type -> chiltrix.SetParameterRequest
	3,  // 13: chiltrix.Historian.QueryStream:output_type -> chiltrix.QueryStreamResponse
	8,  // 14: chiltrix.ReadWriteService.SetParameter:output_type -> chiltrix.SetParameterResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_chiltrix_proto_init() }
func file_chiltrix_proto_init() {
	if File_chiltrix_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chiltrix_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiltrix_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiltrix_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiltrix_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiltrix_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiltrix_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiltrix_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetParameterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiltrix_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiltrix_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetParameterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiltrix_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Temperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chiltrix_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_chiltrix_proto_goTypes,
		DependencyIndexes: file_chiltrix_proto_depIdxs,
		MessageInfos:      file_chiltrix_proto_msgTypes,
	}.Build()
	File_chiltrix_proto = out.File
	file_chiltrix_proto_rawDesc = nil
	file_chiltrix_proto_goTypes = nil
	file_chiltrix_proto_depIdxs = nil
}
