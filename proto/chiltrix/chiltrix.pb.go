// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chiltrix.proto

package chiltrix

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// State captures the state of the heat pump at a given instant for archival purposes.
type State struct {
	// Collection time.
	CollectionTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	// Modbus register values.
	RegisterValues       *RegisterSnapshot `protobuf:"bytes,2,opt,name=register_values,json=registerValues,proto3" json:"register_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_13e145c77d2d01e5, []int{0}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetCollectionTime() *timestamp.Timestamp {
	if m != nil {
		return m.CollectionTime
	}
	return nil
}

func (m *State) GetRegisterValues() *RegisterSnapshot {
	if m != nil {
		return m.RegisterValues
	}
	return nil
}

// Snapshot holds the values of all of the heat pump modbus registers for
// archival purposes.
type RegisterSnapshot struct {
	// The CX34 only supports holding registers, which are 16 bit values.
	// Protobuf only supports 32-bit values, otherwise we would use uint16.
	HoldingRegisterValues map[uint32]uint32 `protobuf:"bytes,1,rep,name=holding_register_values,json=holdingRegisterValues,proto3" json:"holding_register_values,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral  struct{}          `json:"-"`
	XXX_unrecognized      []byte            `json:"-"`
	XXX_sizecache         int32             `json:"-"`
}

func (m *RegisterSnapshot) Reset()         { *m = RegisterSnapshot{} }
func (m *RegisterSnapshot) String() string { return proto.CompactTextString(m) }
func (*RegisterSnapshot) ProtoMessage()    {}
func (*RegisterSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_13e145c77d2d01e5, []int{1}
}

func (m *RegisterSnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterSnapshot.Unmarshal(m, b)
}
func (m *RegisterSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterSnapshot.Marshal(b, m, deterministic)
}
func (m *RegisterSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterSnapshot.Merge(m, src)
}
func (m *RegisterSnapshot) XXX_Size() int {
	return xxx_messageInfo_RegisterSnapshot.Size(m)
}
func (m *RegisterSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterSnapshot proto.InternalMessageInfo

func (m *RegisterSnapshot) GetHoldingRegisterValues() map[uint32]uint32 {
	if m != nil {
		return m.HoldingRegisterValues
	}
	return nil
}

func init() {
	proto.RegisterType((*State)(nil), "chiltrix.State")
	proto.RegisterType((*RegisterSnapshot)(nil), "chiltrix.RegisterSnapshot")
	proto.RegisterMapType((map[uint32]uint32)(nil), "chiltrix.RegisterSnapshot.HoldingRegisterValuesEntry")
}

func init() {
	proto.RegisterFile("chiltrix.proto", fileDescriptor_13e145c77d2d01e5)
}

var fileDescriptor_13e145c77d2d01e5 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x51, 0xcf, 0x4b, 0xfb, 0x30,
	0x14, 0x27, 0x1b, 0xfb, 0xf2, 0x25, 0xb2, 0x3a, 0x8a, 0xe2, 0xe8, 0xc5, 0xb1, 0x93, 0x07, 0x49,
	0x41, 0x11, 0xc4, 0xa3, 0x22, 0xec, 0x9c, 0x89, 0x07, 0x2f, 0xa5, 0xad, 0xcf, 0x24, 0x9a, 0xf6,
	0x95, 0xf6, 0x75, 0x38, 0xff, 0x0b, 0xff, 0x2e, 0xff, 0x29, 0x6d, 0xba, 0x28, 0x0e, 0x77, 0xcb,
	0xe7, 0xe5, 0xf3, 0x2b, 0x79, 0x3c, 0xc8, 0xb5, 0xb1, 0x54, 0x9b, 0x57, 0x51, 0xd5, 0x48, 0x18,
	0xfe, 0xf7, 0x38, 0x3a, 0x56, 0x88, 0xca, 0x42, 0xec, 0xe6, 0x59, 0xfb, 0x14, 0x93, 0x29, 0xa0,
	0xa1, 0xb4, 0xa8, 0x7a, 0xea, 0xfc, 0x9d, 0xf1, 0xd1, 0x92, 0x52, 0x82, 0xf0, 0x86, 0xef, 0xe7,
	0x68, 0x2d, 0xe4, 0x64, 0xb0, 0x4c, 0x3a, 0xde, 0x94, 0xcd, 0xd8, 0xc9, 0xde, 0x59, 0x24, 0x7a,
	0x13, 0xe1, 0x4d, 0xc4, 0x9d, 0x37, 0x91, 0xc1, 0x8f, 0xa4, 0x1b, 0x76, 0x26, 0x35, 0x28, 0xd3,
	0x10, 0xd4, 0xc9, 0x2a, 0xb5, 0x2d, 0x34, 0xd3, 0xc1, 0xc6, 0xe4, 0xbb, 0xa3, 0xdc, 0x10, 0x96,
	0x65, 0x5a, 0x35, 0x1a, 0x49, 0x06, 0x5e, 0x72, 0xef, 0x14, 0xf3, 0x0f, 0xc6, 0x27, 0xdb, 0xa4,
	0xb0, 0xe0, 0x47, 0x1a, 0xed, 0xa3, 0x29, 0x55, 0xb2, 0x9d, 0xc0, 0x66, 0xc3, 0xaf, 0x84, 0x8b,
	0xdd, 0x09, 0x62, 0xd1, 0x2b, 0xe5, 0xaf, 0x9c, 0xdb, 0x92, 0xea, 0xb5, 0x3c, 0xd4, 0x7f, 0xdd,
	0x45, 0x0b, 0x1e, 0xed, 0x16, 0x85, 0x13, 0x3e, 0x7c, 0x81, 0xb5, 0xfb, 0x9f, 0xb1, 0xec, 0x8e,
	0xe1, 0x01, 0x1f, 0xb9, 0x36, 0xee, 0xb9, 0x63, 0xd9, 0x83, 0xab, 0xc1, 0x25, 0xbb, 0x16, 0x0f,
	0xa7, 0xca, 0x90, 0x6e, 0x33, 0x91, 0x63, 0x11, 0x2b, 0x2c, 0xdf, 0xf0, 0xd9, 0xac, 0x20, 0xd6,
	0x90, 0x52, 0xd5, 0x16, 0x55, 0xbf, 0x9b, 0xd8, 0x97, 0xcf, 0xfe, 0x39, 0x7c, 0xfe, 0x19, 0x00,
	0x00, 0xff, 0xff, 0x12, 0xb3, 0xe2, 0xf7, 0xd5, 0x01, 0x00, 0x00,
}
