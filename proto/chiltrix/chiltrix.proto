// Protocol buffers for storing Chiltrix CX34 data.
syntax = "proto3";

package chiltrix;

option go_package = "github.com/gonzojive/heatpump/proto/chiltrix";

import "google/protobuf/timestamp.proto";

// Historian is a service for getting a history of the CX34's state.
service Historian {
    // Provides a value for each key request
    rpc QueryStream (QueryStreamRequest) returns (stream QueryStreamResponse) {}
}

// ReadWriteService is an RPC service for controlling the CX34.
service ReadWriteService {
    // Change a parameter.
    rpc SetParameter (SetParameterRequest) returns (SetParameterResponse) {}


    // Retrieve the state of the heatpump (all modbus parameters).
    rpc GetState (GetStateRequest) returns (State) {}
}

// State captures the state of the heat pump at a given instant for archival purposes.
message State {
    // Collection time.
    .google.protobuf.Timestamp collection_time = 1;

    // Modbus register values.
    RegisterSnapshot register_values = 2;
}


// Snapshot holds the values of all of the heat pump modbus registers for
// archival purposes.
message RegisterSnapshot {
    // The CX34 only supports holding registers, which are 16 bit values.
    // Protobuf only supports 32-bit values, otherwise we would use uint16.
    map<uint32, uint32> holding_register_values = 1;
}

// Request proto for GetState.
message GetStateRequest {}

// QueryStreamRequest specifies a request for heatpump states.
message QueryStreamRequest {
    // start_time and end_time specify a time range to be queried. Either or both values
    // may be omitted. 
    .google.protobuf.Timestamp start_time = 1;
    .google.protobuf.Timestamp end_time = 2;
}

// QueryStreamResponse is an element in the returned stream for the QueryStream RPC.
message QueryStreamResponse {
    State state = 1;
}

// StateSequence captures a series of state values. They are encoded
// differentially.
message StateSequence {
    // A series of StateDiff objects. The first object
    repeated StateDiff diffs = 1;
}

// StateDiff is a difference between two states.
message StateDiff {
    // Collection time, always specified.
    .google.protobuf.Timestamp collection_time = 1;

    // Modbus register values.
    RegisterSnapshot updated_values = 2;

    // Registers that are not present in the new map.
    repeated uint32 deleted_registers = 3;
}

message SetParameterRequest {
    // If specified, updates the target heating mode temperature.
    Temperature target_heating_mode_temperature = 1;

    // Any other register.
    RegisterValue register_value = 2;
}

message RegisterValue {
    uint32 register = 1;
    uint32 value = 2;
}

message SetParameterResponse {}

message Temperature {
    double degrees_celcius = 1;
}
